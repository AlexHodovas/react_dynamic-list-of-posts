{"version":3,"sources":["api/usersApi.js","api/postsApi.js","api/commentsApi.js","components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","debounce.js","App.js","index.js"],"names":["getUsersResolvedPromise","response","result","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","json","abrupt","stop","getPostsResolvedPromise","getCommentsResolvedPromise","User","_ref","userOne","react_default","createElement","className","name","email","address","city","Comment","comment","id","body","CommentList","comments","map","components_Comment","key","Post","postData","components_User","user","title","components_CommentList","PostList","posts","post","components_Post","debounce","func","delay","timer","clearTimeout","_len","arguments","length","args","Array","_key","setTimeout","apply","concat","App","_useState","useState","_useState2","Object","slicedToArray","originalPostsWithAll","getPosts","_useState3","_useState4","isLoading","setLoading","_useState5","_useState6","postsWithAll","getOriginalPosts","getPostsWithUsersAndComments","postsArr","usersArr","commentsArr","objectSpread2","find","userId","filter","postId","debounceHandler","value","searchQuery","toLowerCase","_ref3","includes","type","onClick","_ref2","users","t0","t1","Promise","t2","t3","t4","t5","t6","all","call","loadData","placeholder","onChange","e","target","components_PostList","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.40fd922a.chunk.js","sourcesContent":["export const getUsersResolvedPromise = async() => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/users');\n  const result = await response.json();\n\n  return result;\n};\n","export const getPostsResolvedPromise = async() => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n  const result = await response.json();\n\n  return result;\n};\n","export const getCommentsResolvedPromise = async() => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/comments');\n  const result = await response.json();\n\n  return result;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ userOne }) => (\n  <div className=\"user\">\n    {'written by '}\n    {userOne.name}\n    {<br />}\n    {userOne.email}\n    {<br />}\n    {userOne.address.city}\n  </div>\n);\n\nUser.propTypes = { userOne: PropTypes.objectOf(PropTypes.any).isRequired };\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Comment = ({ comment }) => (\n  <div className=\"comment\">\n    <p>\n      {'Comment - '}\n      {comment.id}\n    </p>\n    <p>\n      {comment.body}\n    </p>\n    <p>\n      {'E-mail - '}\n      {comment.email}\n    </p>\n  </div>\n);\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    body: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Comment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment';\n\nconst CommentList = ({ comments }) => (\n  <div className=\"comments\">\n    <h2>Comments</h2>\n    { comments.map(comment => (\n      <Comment comment={comment} key={comment.id} />\n    )) }\n  </div>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.object\n  ).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport User from './User';\nimport CommentList from './CommentList';\n\nconst Post = ({ postData }) => (\n  <div className=\"post\">\n    <User userOne={postData.user} />\n    <p className=\"post-title\">\n      {'Post# - '}\n      {postData.id}\n    </p>\n    <p>\n      {'Topic - '}\n      {postData.title}\n    </p>\n    <p>{postData.body}</p>\n    <CommentList comments={postData.comments} />\n  </div>\n);\n\nPost.propTypes = {\n  postData: PropTypes.shape({\n    userId: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => (\n  <div className=\"posts\">\n    { posts.map(post => (\n      <Post postData={post} key={post.id} />\n    )) }\n  </div>\n);\n\nPostList.propTypes = { posts: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default PostList;\n","export const debounce = (func, delay) => {\n  let timer;\n\n  return (...args) => {\n    clearTimeout(timer);\n\n    timer = setTimeout(func, delay, ...args);\n  };\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getUsersResolvedPromise } from './api/usersApi';\nimport { getPostsResolvedPromise } from './api/postsApi';\nimport { getCommentsResolvedPromise } from './api/commentsApi';\nimport PostList from './components/PostList';\nimport { debounce } from './debounce';\n\nfunction App() {\n  const [originalPostsWithAll, getPosts] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [postsWithAll, getOriginalPosts] = useState([]);\n\n  const getPostsWithUsersAndComments = (postsArr, usersArr, commentsArr) => (\n    postsArr.map(post => (\n      {\n        ...post,\n        user: usersArr.find(user => user.id === post.userId),\n        comments: commentsArr.filter(comment => comment.postId === post.id),\n      }\n    ))\n  );\n\n  const loadData = async() => {\n    setLoading(true);\n\n    const [\n      posts,\n      users,\n      comments,\n    ] = await Promise.all([\n      await getPostsResolvedPromise(),\n      await getUsersResolvedPromise(),\n      await getCommentsResolvedPromise(),\n    ]);\n\n    getPosts(getPostsWithUsersAndComments(posts, users, comments));\n    getOriginalPosts(getPostsWithUsersAndComments(posts, users, comments));\n    setLoading(false);\n  };\n\n  const searchPosts = (value) => {\n    const searchQuery = value.toLowerCase();\n\n    getPosts(\n      postsWithAll.filter(\n        ({ title, body }) => (\n          (title + body).toLowerCase().includes(searchQuery)\n        )\n      )\n    );\n  };\n\n  const debounceHandler = debounce(searchPosts, 1000);\n\n  if (originalPostsWithAll.length === 0) {\n    return (\n      <button\n        type=\"button\"\n        onClick={() => loadData()}\n      >\n        {isLoading ? 'Loading...' : 'Load'}\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      <p>\n        posts found -\n        {originalPostsWithAll.length}\n      </p>\n      <input\n        type=\"search\"\n        className=\"input\"\n        placeholder=\"Search for posts\"\n        onChange={e => debounceHandler(e.target.value)}\n      />\n      <PostList posts={originalPostsWithAll} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}